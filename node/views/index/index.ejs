<div class="container-fluid">

	<h1>
		Projeto
	</h1>
	
	<div class="row">
		<div class="col-sm-4">

			<div class="card shadow my-4">
				<div class="card-body">
					<form id="form">
						<div class="form-group">
							<label for="coin">Crypto</label>
							<select multiple name="coin" id="coin" style="display: none;">
								<% moedas.forEach(moeda => { %>
									<option value="<%= moeda.idcurrency %>"><%= moeda.nome %></option>
								<% }); %>
							</select>
						</div>
		
						<button type="submit" class="btn btn-primary">Listar</button>
					</form>
				</div>
			</div>

		</div>
	</div>

	<div class="card shadow my-4">
		<div class="card-body" id="div-grafico"></div>
	</div>

</div>

<%- contentFor("espaco-rodape") %>

<script src="/public/js/jquery-validate/jquery.validate.min.js"></script>
<script src="/public/js/jquery-validate/additional-methods.min.js"></script>
<script src="/public/js/jquery-validate/localization/messages_pt_BR.min.js"></script>
<script type="text/javascript" src="/public/js/chart.js/chart.min.js"></script>

<script type="text/javascript">
	"use strict";
	let coin = $("#coin").filterMultiSelect({
		placeholderText: "Nada Selecionado",
		filterText: "Filtro",
		selectAllText: "Selecionar Tudo",
		labelText: "",
		selectionLimit: 0,
		caseSensitive: false,
		allowEnablingAndDisabling: false,
	});
	// 

	$("#form").validate({
		rules: {
			data: {
				required: true
			}
		},
		submitHandler: function () {
			atualizarDados();
		}
	});

	async function atualizarDados() {
		waitSwal();

		try {

			let selecao = JSON.parse(coin.getSelectedOptionsAsJson()).coin;
			let response = await fetch("/obterDados", {
				method: "POST",
				body: JSON.stringify({
					selecao: selecao
				}),
				headers: {
					"content-type": "application/json"
				}
			});

			if (response.ok) {

				Swal.close();

				let div = document.getElementById("div-grafico");
				div.innerHTML = '<canvas id="grafico-barras" style="height: 50vh;"></canvas>';

				let dados = await response.json();
				if (!dados || !dados.length) {
					Swal.fire("Erro", "Sem dados para as moedas escolhidas!", "error");
					return;
				}

				const datasets = [];
				const labels = [];

				dados.forEach(dadosMoeda => {
					if (!dadosMoeda || !dadosMoeda.length) {
						return;
					}

					if (!labels.length) {
						for (let i = 0; i < dadosMoeda.length; i++) {
							labels.push(dadosMoeda[i].data);
						}
					}

					const valores = new Array(dadosMoeda.length);
					for (let i = 0; i < dadosMoeda.length; i++) {
						valores[i] = dadosMoeda[i].valor;
					}

					datasets.push({
						label: dadosMoeda[0].sigla,
						backgroundColor: "#F31C06",
						hoverBackgroundColor: "#F31C06",
						borderColor: "#F31C06",
						data: valores,
					});
				});

				if (!datasets.length) {
					Swal.fire("Erro", "Sem dados para as moedas escolhidas!", "error");
					return;
				}

				let grafico = new Chart(document.getElementById("grafico-barras"), {
					type: "line",
					data: {
						labels: labels,
						datasets: datasets,
					},
					options: {
						maintainAspectRatio: false,
						layout: {
							padding: {
								left: 10,
								right: 25,
								top: 25,
								bottom: 0
							}
						},
						scales: {
							x: {
								gridLines: {
									display: false,
									drawBorder: false
								},
								ticks: {
									maxTicksLimit: 10
								},
								maxBarThickness: 25,
							},
							y: {
								//display: false,
								ticks: {
									min: 0,
									max: 10,
									maxTicksLimit: 10,
									padding: 10
								},
								gridLines: {
									color: "rgb(234, 236, 244)",
									zeroLineColor: "rgb(234, 236, 244)",
									drawBorder: false,
									borderDash: [2],
									zeroLineBorderDash: [2]
								}
							},
						},
						legend: {
							display: false
						},
						tooltips: {
							titleMarginBottom: 10,
							titleFontColor: '#6e707e',
							titleFontSize: 14,
							backgroundColor: "rgb(255,255,255)",
							bodyFontColor: "#858796",
							borderColor: '#dddfeb',
							borderWidth: 1,
							xPadding: 15,
							yPadding: 15,
							displayColors: false,
							caretPadding: 10
						},
					}
				});

			} else {
				await exibirErro(response);
			}

		} catch (ex) {
			Swal.fire("Erro", "Erro ao listar os dados: " + ex.message, "error");
		}
	}

	atualizarDados();

</script>

<%- contentFor("espaco-head") %>
<link rel="stylesheet" href="/public/js/multiselect/filter_multi_select.css" />
<script src="/public/js/multiselect/filter-multi-select-bundle.min.js"></script>
